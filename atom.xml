<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chance</title>
  <icon>https://www.gravatar.com/avatar/a31c8546996faf9a1219c8776754ad93</icon>
  <subtitle>Talk is cheap, show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chanceli.com/"/>
  <updated>2018-12-06T10:04:13.873Z</updated>
  <id>http://chanceli.com/</id>
  
  <author>
    <name>Chance</name>
    <email>redlic@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective Objective-C 2.0（第7章）</title>
    <link href="http://chanceli.com/Effective-Objective-C-2-0%EF%BC%88%E7%AC%AC7%E7%AB%A0%EF%BC%89/"/>
    <id>http://chanceli.com/Effective-Objective-C-2-0（第7章）/</id>
    <published>2018-01-06T16:07:00.000Z</published>
    <updated>2018-12-06T10:04:13.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写高质量iOS与OS-X代码的52个有效方法"><a href="#编写高质量iOS与OS-X代码的52个有效方法" class="headerlink" title="编写高质量iOS与OS X代码的52个有效方法"></a>编写高质量iOS与OS X代码的52个有效方法</h2><h3 id="第7章-系统框架"><a href="#第7章-系统框架" class="headerlink" title="第7章 系统框架"></a>第7章 系统框架</h3><a id="more"></a><h4 id="47-熟悉系统框架"><a href="#47-熟悉系统框架" class="headerlink" title="47.熟悉系统框架"></a>47.熟悉系统框架</h4><p>将一系列代码封装为动态库（dynamic library），并在其中放入描述其接口的头文件，这样做出来的东西就叫框架。有时为iOS平台构建的第三方框架所使用的是静态库（static library），这是因为iOS应用程序不允许在其中包含动态库。这些东西严格来讲并不是真正的框架，然而也经常视为框架。不过，所有iOS平台的系统框架仍然使用动态库。</p><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li>许多系统框架都可以直接使用。其中最重要的是Foundation与CoreFoundation，这两个框架提供了构建应用程序所需的许多核心功能。</li><li>很多常见任务都能用框架来做，例如音频与视频处理、网络通信、数据管理等。</li><li>请记住：用纯C写成的框架与用Objective-C写成的一样重要，若想成为优秀的Objective-C开发者，应该掌握C语言的核心概念。</li></ul><h4 id="48-多用块枚举，少用for循环"><a href="#48-多用块枚举，少用for循环" class="headerlink" title="48.多用块枚举，少用for循环"></a>48.多用块枚举，少用for循环</h4><ul><li>for 循环</li><li>使用Objective-C 1.0 的 NSEnumerator来遍历</li><li>快速遍历</li><li>基于块的遍历方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)enumerateObjectsUsingBlock:(void(^)(id object, NSUInteger idx, BOOL *stop))block</span><br></pre></td></tr></table></figure></li></ul><h5 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h5><ul><li>遍历collection有四种方式。最基本的办法是for循环，其次是NSEnumerator遍历法及快速遍历法，最新、最先进的方式是“块枚举法”。</li><li>“块枚举法”本身就能通过GCD来并发执行遍历操作，无须另行编写代码。而采用其他遍历方式则无法轻易实现这一点。</li><li>若提前知道待遍历的collection含有何种对象，则应修改块签名，指出对象的具体类型。</li></ul><h4 id="49-对自定义其内存管理语义的collection使用无缝桥接"><a href="#49-对自定义其内存管理语义的collection使用无缝桥接" class="headerlink" title="49.对自定义其内存管理语义的collection使用无缝桥接"></a>49.对自定义其内存管理语义的collection使用无缝桥接</h4><p>__bridge</p><h5 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h5><ul><li>通过无缝桥接技术，可以在Foundation框架中的Objective-C对象与CoreFoundation框架中的C语言数据结构之间来回转换。</li><li>在CoreFoundation层面创建collection时，可以指定许多回调函数，将其转换成具备特殊内存管理予以的Objective-C collection。</li></ul><h4 id="50-构建缓存时选用NSCache而非NSDictionary"><a href="#50-构建缓存时选用NSCache而非NSDictionary" class="headerlink" title="50.构建缓存时选用NSCache而非NSDictionary"></a>50.构建缓存时选用NSCache而非NSDictionary</h4><p>NSCache是线程安全的。而NSDictionary则绝对不具备此优势，意思就是：在开发者自己不编写加锁代码的前提下，多个线程便可以同时访问NSCache。</p><h5 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h5><ul><li>实现缓存时应选用NSCache而非NSDictionary对象。因为NSCache可以提供优雅的自动删减功能，而且是“线程安全的”，此外，它与字典不同，并不会拷贝键。</li><li>可以给NSCache对象设置上限，用以限制缓存中的对象总个数及“总成本”，而这些尺度则定义了缓存删减其中对象的时机。但是绝对不要把这些尺度当成可靠的“硬限制”（hard limit），它们仅对NSCache起指导作用。</li><li>将NSPurgeableData与NSCache搭配使用，可实现自动清除数据的功能，也就是说，当NSPurgeableData对象所占内存为系统所丢弃时，该对象自身也会从缓存中移除。</li><li>如果缓存使用得当，那么应用程序的响应速度就能提高。只有那种“重新计算起来费事的”数据，才值得放入缓存，比如那些需要从网络获取或从磁盘读取的数据。</li></ul><h4 id="51-精简initialize与load的实现代码"><a href="#51-精简initialize与load的实现代码" class="headerlink" title="51.精简initialize与load的实现代码"></a>51.精简initialize与load的实现代码</h4><h5 id="要点-4"><a href="#要点-4" class="headerlink" title="要点"></a>要点</h5><ul><li>在加载阶段，如果累实现了load方法，那么系统就会调用它。分类里也可以定义此方法，类的load方法要比分类中的先调用。与其他方法不同，load方法不参与覆写机制。</li><li>首次使用到某个类之前，系统会向其发送initialize消息。由于此方法遵从普通的覆写规则，所以通常应该在里面判断当前要初始化的是哪个类。</li><li>load与initialize方法都应该实现得精简一些，这有助于保持应用程序的响应能力，也能减少引入“依赖环”（interdependency cycle）的几率。</li><li>无法在编译期设定的全局变量，可以放在initialize方法里初始化。</li></ul><h4 id="52-别忘了NSTimer会保留其目标对象"><a href="#52-别忘了NSTimer会保留其目标对象" class="headerlink" title="52.别忘了NSTimer会保留其目标对象"></a>52.别忘了NSTimer会保留其目标对象</h4><h5 id="要点-5"><a href="#要点-5" class="headerlink" title="要点"></a>要点</h5><ul><li>NSTimer对象会保留其目标，直到计时器本身失效为止，调用invalidate方法可令计时器失效，另外，一次性的计时器在触发完成任务之后也会失效。</li><li>反复执行任务的计时器（repeating timer），很容易引入保留环，如果这种计时器的目标对象又保留了计时器本身，那肯定户籍导致保留环。这种环状保留关系，可能是直接发生的，也可能是通过对象图里的其他对象间接发生的。</li><li>可以扩充NSTimer的功能，用“块”来打破保留环。不过，除非NSTimer将来在公共接口里提供此功能，否则必须创建分类，将相关实现代码加入其中。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写高质量iOS与OS-X代码的52个有效方法&quot;&gt;&lt;a href=&quot;#编写高质量iOS与OS-X代码的52个有效方法&quot; class=&quot;headerlink&quot; title=&quot;编写高质量iOS与OS X代码的52个有效方法&quot;&gt;&lt;/a&gt;编写高质量iOS与OS X代码的52个有效方法&lt;/h2&gt;&lt;h3 id=&quot;第7章-系统框架&quot;&gt;&lt;a href=&quot;#第7章-系统框架&quot; class=&quot;headerlink&quot; title=&quot;第7章 系统框架&quot;&gt;&lt;/a&gt;第7章 系统框架&lt;/h3&gt;
    
    </summary>
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/categories/Effective-Objective-C-2-0/"/>
    
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/tags/Effective-Objective-C-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0（第6章）</title>
    <link href="http://chanceli.com/Effective-Objective-C-2-0%EF%BC%88%E7%AC%AC6%E7%AB%A0%EF%BC%89/"/>
    <id>http://chanceli.com/Effective-Objective-C-2-0（第6章）/</id>
    <published>2018-01-05T16:06:00.000Z</published>
    <updated>2018-12-06T10:03:56.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写高质量iOS与OS-X代码的52个有效方法"><a href="#编写高质量iOS与OS-X代码的52个有效方法" class="headerlink" title="编写高质量iOS与OS X代码的52个有效方法"></a>编写高质量iOS与OS X代码的52个有效方法</h2><h3 id="第6章-块与大中枢派发"><a href="#第6章-块与大中枢派发" class="headerlink" title="第6章 块与大中枢派发"></a>第6章 块与大中枢派发</h3><a id="more"></a><h4 id="37-理解“块”这一概念"><a href="#37-理解“块”这一概念" class="headerlink" title="37.理解“块”这一概念"></a>37.理解“块”这一概念</h4><ul><li>块是C、C++、Objective-C 中的词法闭包。</li><li>块可接受参数，也可返回值。</li><li>块可以分配在栈或堆上，也可以是全局的。分配在栈上的块可拷贝到堆里，这样的话，就和标准的 Objective-C 对象一样，具备引用计数了。</li></ul><h4 id="38-为常用的块类型创建-typedef"><a href="#38-为常用的块类型创建-typedef" class="headerlink" title="38.为常用的块类型创建 typedef"></a>38.为常用的块类型创建 typedef</h4><ul><li>以typedef重新定义块类型，可令块变量用起来更加简单。</li><li>定义新类型时应遵从现有的命名习惯，勿使其名称与别的类型相冲突。</li><li>不妨为同一个块签名定义多个类型别名。如果要重构的代码使用了块类型的某个别名，那么只需修改相应的 typedef 中的块签名即可，无须改动其他typedef。</li></ul><h4 id="39-用-handler-块降低代码分散程度"><a href="#39-用-handler-块降低代码分散程度" class="headerlink" title="39.用 handler 块降低代码分散程度"></a>39.用 handler 块降低代码分散程度</h4><ul><li>在创建对象时，可以使用内联的 handler 块将相关业务逻辑一并声明。</li><li>在有多个实例需要监控时，如果采用委托模式，那么经常需要根据传入的对象来切换，而若改用 handler 块来实现，则可直接将块与相关对象放在一起。</li><li>设计 API 时如果用到了 handler 块，那么可以增加一个参数，使调用者可通过此参数来决定应该把块安排在哪个队列上执行。</li></ul><h4 id="40-用块引用其所属对象时不要出现保留环"><a href="#40-用块引用其所属对象时不要出现保留环" class="headerlink" title="40.用块引用其所属对象时不要出现保留环"></a>40.用块引用其所属对象时不要出现保留环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)p_requestCompleted &#123;</span><br><span class="line">    if (_completionHandler) &#123;</span><br><span class="line">        _completionHandler(_downloadedData);</span><br><span class="line">  &#125;</span><br><span class="line">  self.completionHandler = nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要下载请求执行完毕，保留环就解除了，而获取器对象也将会在必要时为系统所回收。</p><ul><li>如果块所捕获的对象直接或间接地保留了块本身，那么就得当心保留环问题。</li><li>一定要找个适当的时机解除保留环，而不能把责任推给 API 的调用者。</li></ul><h4 id="41-多用派发队列，少用同步锁"><a href="#41-多用派发队列，少用同步锁" class="headerlink" title="41.多用派发队列，少用同步锁"></a>41.多用派发队列，少用同步锁</h4><h5 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h5><ol><li><p>同步块（synchronization block）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)synchronizedMethod &#123;</span><br><span class="line">    @synchronized(self) &#123;</span><br><span class="line">          //Safe</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NSLock锁对象  NSRecursiveLock递归锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_lock = [[NSLock alloc] init];</span><br><span class="line">- (void)synchronizedMethod &#123;</span><br><span class="line">    [_lock lock];</span><br><span class="line">    //Safe</span><br><span class="line">    [_lock unlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>缺陷：</p><ul><li>在极端情况下，同步块会导致死锁。</li><li>效率不见得很高。</li><li>直接使用锁对象，一旦遇到死锁，就会非常麻烦。</li><li>用atomic来修饰属性，只能提供某种程度的线程安全，无法保证访问该对象时绝对是线程安全的。使用属性时，必然能从中获取到有效值，然而在同一线程上多次调用获取方法（getter），每次获取到的结果未必相同。在两次访问操作之间，其他线程可能会写入新的属性值。</li></ul><ol start="3"><li>GCD<br> 串行同步队列（serial synchronization queue）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">_syncQueue = dispatch_queue_create(&quot;com.effectiveObjectivec.syncQueue&quot;,NULL);</span><br><span class="line">- (NSString *)someString &#123;</span><br><span class="line">  __block NSString *localSomeString;</span><br><span class="line"> dispatch_sync(_syncQueue, ^&#123;</span><br><span class="line">      localSomeString = _someString;</span><br><span class="line">    &#125;);</span><br><span class="line">    return localSomeString;</span><br><span class="line">&#125;</span><br><span class="line">- (void)setSomeString:(NSString *)someString &#123;</span><br><span class="line">    dispatch_sync(_syncQueue, ^&#123;</span><br><span class="line">          _someString = someString;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>思路是：把设置操作与获取操作都安排在序列化的队列里执行，这样的话，所有针对属性的访问操作就都同步了。全部加锁任务都在GCD中处理。<br>并发队列（concurrent queue）<br>栅栏（barrier）<br>在队列中，栅栏块必须单独执行，不能与其他块并行。这只对并发队列有意义，因为串行队列中的块总是按顺序逐个来执行的。并发队列如果发现接下来要处理的块是个栅栏块，那么久一直要等栅栏块执行过后，再按正常方式继续向下处理。</p><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li>派发队列可用来表述同步语义（synchronization semantic），这种做法要比使用@synchronized 块或 NSLock 对象更简单。</li><li>将同步与异步派发结合起来，可以实现与普通加锁机制一样的同步行为，而这么做却不会阻塞执行异步派发的线程。</li><li>使用同步队列及栅栏块，可以令同步行为更加高效。</li></ul><h4 id="42-多用GCD，少用-performSelector-系列方法"><a href="#42-多用GCD，少用-performSelector-系列方法" class="headerlink" title="42.多用GCD，少用 performSelector 系列方法"></a>42.多用GCD，少用 performSelector 系列方法</h4><ol><li>performSelector 可能内存泄漏<br> performSelector 调用了一个方法。编译器并不知道将要调用的选择子是什么，因此，也就不了解其方法签名及返回值，甚至连是否有返回值都不清楚。而且，由于编译器不知道方法名，所以就没办法运用ARC的内存管理规则来判定返回值是不是应该释放。鉴于此，ARC采用了比较谨慎的做法，就是不添加释放操作。然而这么做可能导致内存泄漏，因为方法在返回对象时可能已经将其保留了。</li><li>有局限性。</li></ol><ul><li>返回值只能是void或对象类型。</li><li>参数类型是id，所以只能传入对象。此外，最多只能接受两个参数。</li></ul><p>dispatch_sync<br>dispatch_async<br>dispatch_after</p><h5 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h5><ul><li>performSelector 系列方法在内存管理方面容易有疏忽。它无法确定将要执行的选择子具体是什么，因而ARC编译器也就无法插入适当的内存管理方法。</li><li>performSelector 系列方法所能处理的选择子太过局限了，选择子的返回值类型及发送给方法的参数个数都收到限制。</li><li>如果想把任务放在另一个线程上执行，那么最好不要用 performSelector 系列方法，而是应该把任务封装到块里，然后调用大中枢派发机制的相关方法来实现。</li></ul><h4 id="43-掌握GCD及操作队列的使用时机"><a href="#43-掌握GCD及操作队列的使用时机" class="headerlink" title="43.掌握GCD及操作队列的使用时机"></a>43.掌握GCD及操作队列的使用时机</h4><h5 id="GCD与NSOperationQueue"><a href="#GCD与NSOperationQueue" class="headerlink" title="GCD与NSOperationQueue"></a>GCD与NSOperationQueue</h5><ul><li>操作队列在底层是用GCD来实现的。</li><li>GCD是纯C的API，而操作队列则是Objective-C的对象。</li><li>在GCD中，任务用块来表示，而块是一个轻量级的数据结构。预支相反，“操作”（operation）则是个更为重量级的Objective-C对象。</li></ul><h5 id="使用NSOperation及NSOperationQueue的好处："><a href="#使用NSOperation及NSOperationQueue的好处：" class="headerlink" title="使用NSOperation及NSOperationQueue的好处："></a>使用NSOperation及NSOperationQueue的好处：</h5><ul><li>取消某个操作。运行任务之前，可以在NSOperation对象上调用cancel方法，该方法会设置对象内的标志位，用以表明此任务不需执行，不过，已经启动的任务无法取消。若是不使用操作队列，而是把块安排在GCD队列，那就无法取消了。开发者可以在应用程序层自己来实现取消功能，不过这样做需要编写很多代码，而那些代码其实已经由操作队列实现好了。</li><li>指定操作间的依赖关系。</li><li>通过键值观察机制监控NSOperation对象的属性。如isCancelled、isFinished。如果想在某个任务变更其状态时得到通知，或是想用比GCD更为精细的方式来控制所要执行的任务，那么键值观察机制会很有用。</li><li>指定操作的优先级。GCD只有队列的优先级，没有任务的优先级。NSOpetation对象也有线程优先级，这决定了运行此操作的线程处在何种优先级上。GCD可以实现此功能，然而操作队列更简单，只需设置一个属性。</li><li>重用NSOperation对象。<br>系统的NSNotificationCenter API选用了操作队列而非派发队列，开发者可通过其中的方法来注册监听器，以便在发生相关事件时得到通知，而这个方法接受的参数是块，不是选择子。</li></ul><h5 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h5><ul><li>在解决多线程与任务管理问题时，派发队列并非唯一方案。</li><li>操作队列提供了一套高层的Objective-C API，能实现纯GCD所具备的绝大部分功能，而且还能完成一些更为复杂的操作，那些操作若改用GCD来实现，则需另外编写代码。</li></ul><h4 id="44-通过-Dispatch-Group-机制，根据系统资源状况来执行任务"><a href="#44-通过-Dispatch-Group-机制，根据系统资源状况来执行任务" class="headerlink" title="44.通过 Dispatch Group 机制，根据系统资源状况来执行任务"></a>44.通过 Dispatch Group 机制，根据系统资源状况来执行任务</h4><h5 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h5><ul><li>一系列任务可归入一个 dispatch group 之中。开发者可以在这组任务执行完毕时获得通知。</li><li>通过dispatch group，可以在并发式派发队列里同时执行多项任务。此时GCD会根据系统资源状况来调度这些并发执行的任务。开发者若自己来实现此功能，则需编写大量代码。</li></ul><h4 id="45-使用dispatch-once来执行只需运行一次的线程安全代码"><a href="#45-使用dispatch-once来执行只需运行一次的线程安全代码" class="headerlink" title="45. 使用dispatch_once来执行只需运行一次的线程安全代码"></a>45. 使用dispatch_once来执行只需运行一次的线程安全代码</h4><h5 id="实现单例"><a href="#实现单例" class="headerlink" title="实现单例"></a>实现单例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (id)sharedInstance &#123;</span><br><span class="line">    static EOCClass *sharedInstance = nil;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">          sharedInstance = [[self alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-4"><a href="#要点-4" class="headerlink" title="要点"></a>要点</h5><ul><li>经常需要编写“只需执行一次的线程安全代码”（thread-safe single-code execution）。通过GCD所提供的 dispatch_once 函数，很容易就能实现此功能。</li><li>标记应该声明在 static 或 global 作用域中，这样的话，在把只需执行一次的块传给 dispatch_once 函数时，传进去的标记也是相同的。</li></ul><h4 id="46-不要使用-dispatch-get-current-queue"><a href="#46-不要使用-dispatch-get-current-queue" class="headerlink" title="46.不要使用 dispatch_get_current_queue"></a>46.不要使用 dispatch_get_current_queue</h4><h5 id="要点-5"><a href="#要点-5" class="headerlink" title="要点"></a>要点</h5><ul><li>dispatch_get_current_queue 函数的行为常常与开发者所预期的不同。此函数已经废弃，只应做调试之用。</li><li>由于派发队列是按层级来组织的，所以无法单用某个队列对象来描述“当前队列”这一概念。</li><li>dispatch_get_current_queue 函数用于解决由不可重入的代码所引发的死锁，然而能用此函数解决的问题，通常也能改用“队列特定数据”来解决。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写高质量iOS与OS-X代码的52个有效方法&quot;&gt;&lt;a href=&quot;#编写高质量iOS与OS-X代码的52个有效方法&quot; class=&quot;headerlink&quot; title=&quot;编写高质量iOS与OS X代码的52个有效方法&quot;&gt;&lt;/a&gt;编写高质量iOS与OS X代码的52个有效方法&lt;/h2&gt;&lt;h3 id=&quot;第6章-块与大中枢派发&quot;&gt;&lt;a href=&quot;#第6章-块与大中枢派发&quot; class=&quot;headerlink&quot; title=&quot;第6章 块与大中枢派发&quot;&gt;&lt;/a&gt;第6章 块与大中枢派发&lt;/h3&gt;
    
    </summary>
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/categories/Effective-Objective-C-2-0/"/>
    
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/tags/Effective-Objective-C-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0（第5章）</title>
    <link href="http://chanceli.com/Effective-Objective-C-2-0%EF%BC%88%E7%AC%AC5%E7%AB%A0%EF%BC%89/"/>
    <id>http://chanceli.com/Effective-Objective-C-2-0（第5章）/</id>
    <published>2018-01-04T16:05:00.000Z</published>
    <updated>2018-12-06T10:03:45.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写高质量iOS与OS-X代码的52个有效方法"><a href="#编写高质量iOS与OS-X代码的52个有效方法" class="headerlink" title="编写高质量iOS与OS X代码的52个有效方法"></a>编写高质量iOS与OS X代码的52个有效方法</h2><h3 id="第5章-内存管理"><a href="#第5章-内存管理" class="headerlink" title="第5章 内存管理"></a>第5章 内存管理</h3><a id="more"></a><h4 id="29-理解引用计数"><a href="#29-理解引用计数" class="headerlink" title="29.理解引用计数"></a>29.理解引用计数</h4><ul><li>引用计数机制通过可以递增递减的计数器来管理内存。对象创建好之后，其保留计数至少为1。若保留计数为正，则对象继续存活。当保留计数降为0时，对象就被销毁了。</li><li>在对象的生命周期中，其余对象通过引用来保留或释放此对象。保留与释放操作分别会递增及递减保留计数。</li></ul><h4 id="30-以ARC简化引用计数"><a href="#30-以ARC简化引用计数" class="headerlink" title="30.以ARC简化引用计数"></a>30.以ARC简化引用计数</h4><ul><li>有ARC之后，程序员就无须担心内存管理问题了。使用ARC来编程，可以省去类中许多“样板代码”。</li><li>ARC管理对象生命期的办法基本上就是：在合适的地方插入“保留”及“释放”操作。在ARC环境下，变量的内存管理语义可以通过修饰符指明，而原来则需要手工执行“保留”及“释放”操作。</li><li>由方法所返回的对象，其内存管理语义总是通过方法名来体现。ARC将此确定为开发者必须遵守的规则。</li><li>ARC只负责管理Objective-C对象的内存。尤其要注意：CoreFoundation对象不归ARC管理，开发者必须适时调用CFRetain/CFRelease。</li></ul><h4 id="31-在dealloc方法中只释放引用并解除监听"><a href="#31-在dealloc方法中只释放引用并解除监听" class="headerlink" title="31.在dealloc方法中只释放引用并解除监听"></a>31.在dealloc方法中只释放引用并解除监听</h4><ul><li>在dealloc方法里，应该做的事情就是释放指向其他对象的引用，并取消原来订阅的“键值观察”(KVO)或NSNotificationCenter等通知，不要做其他事情。</li><li>如果对象持有文件描述符等系统资源，那么应该专门编写一个方法来释放此种资源。这样的类要和其使用者约定：用完资源后必须调用close方法。</li><li>执行异步任务的方法不应在dealloc里调用；只能在正常状态下执行的那些方法也不应在dealloc里调用，因为此时对象已处于正在回收的状态了。</li></ul><h4 id="32-编写“异常安全代码”时留意内存管理问题"><a href="#32-编写“异常安全代码”时留意内存管理问题" class="headerlink" title="32.编写“异常安全代码”时留意内存管理问题"></a>32.编写“异常安全代码”时留意内存管理问题</h4><ul><li>捕获异常时，一定要注意将try块内所创立的对象清理干净。</li><li>在默认情况下，ARC不生成安全处理异常所需的清理代码。开启编译器标志后，可生成这种代码，不过会导致应用程序变大，而且会降低运行效率。</li></ul><h4 id="33-以弱引用避免保留环"><a href="#33-以弱引用避免保留环" class="headerlink" title="33.以弱引用避免保留环"></a>33.以弱引用避免保留环</h4><ul><li>将某些引用设为weak，可避免出现“保留环”。</li><li>weak引用可以自动清空，也可以不自动清空。自动清空（autonilling）是随着ARC而引人的新特性，由运行期系统来实现。在具备自动清空功能的弱引用上，可以随意读取其数据，因为这种引用不会指向已经回收过的对象。</li></ul><h4 id="34-以“自动释放池块”降低内存峰值"><a href="#34-以“自动释放池块”降低内存峰值" class="headerlink" title="34.以“自动释放池块”降低内存峰值"></a>34.以“自动释放池块”降低内存峰值</h4><ul><li>自动释放池排布在栈中，对象收到autorelease消息后，系统将其放入最顶端的池里。</li><li>合理运用自动释放池，可降低应用程序的内存峰值。</li><li>@autoreleasepool这种新式写法能创建出更为轻便的自动释放池。</li></ul><h4 id="35-用“僵尸对象”调试内存管理问题"><a href="#35-用“僵尸对象”调试内存管理问题" class="headerlink" title="35.用“僵尸对象”调试内存管理问题"></a>35.用“僵尸对象”调试内存管理问题</h4><ul><li>系统在回收对象时，可以不将其真的回收，而是把它转化为僵尸对象。通过环境变量NSZombieEnabled可开启此功能。</li><li>系统会修改对象的isa指针，令其指向特殊的僵尸类，从而使该对象变为僵尸对象。僵尸类能够响应所有的选择子，响应方式为：打印一条包含消息内容及其接收者的消息，然后终止应用程序。</li></ul><h4 id="36-不要使用retainCount"><a href="#36-不要使用retainCount" class="headerlink" title="36.不要使用retainCount"></a>36.不要使用retainCount</h4><ul><li>对象的保留计数看似有用，实则不然，因为任何给定时间点上的“绝对保留计数”（absolute retain count）都无法反应对象生命周期的全貌。</li><li>引入ARC之后，retainCount方法就正式废止了，在ARC下调用该方法会导致编译器报错。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写高质量iOS与OS-X代码的52个有效方法&quot;&gt;&lt;a href=&quot;#编写高质量iOS与OS-X代码的52个有效方法&quot; class=&quot;headerlink&quot; title=&quot;编写高质量iOS与OS X代码的52个有效方法&quot;&gt;&lt;/a&gt;编写高质量iOS与OS X代码的52个有效方法&lt;/h2&gt;&lt;h3 id=&quot;第5章-内存管理&quot;&gt;&lt;a href=&quot;#第5章-内存管理&quot; class=&quot;headerlink&quot; title=&quot;第5章 内存管理&quot;&gt;&lt;/a&gt;第5章 内存管理&lt;/h3&gt;
    
    </summary>
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/categories/Effective-Objective-C-2-0/"/>
    
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/tags/Effective-Objective-C-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0（第4章）</title>
    <link href="http://chanceli.com/Effective-Objective-C-2-0%EF%BC%88%E7%AC%AC4%E7%AB%A0%EF%BC%89/"/>
    <id>http://chanceli.com/Effective-Objective-C-2-0（第4章）/</id>
    <published>2018-01-03T16:04:00.000Z</published>
    <updated>2018-12-06T10:03:35.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写高质量iOS与OS-X代码的52个有效方法"><a href="#编写高质量iOS与OS-X代码的52个有效方法" class="headerlink" title="编写高质量iOS与OS X代码的52个有效方法"></a>编写高质量iOS与OS X代码的52个有效方法</h2><h3 id="第4章-协议与分类"><a href="#第4章-协议与分类" class="headerlink" title="第4章 协议与分类"></a>第4章 协议与分类</h3><a id="more"></a><h4 id="23-通过委托与数据源协议进行对象间通信"><a href="#23-通过委托与数据源协议进行对象间通信" class="headerlink" title="23.通过委托与数据源协议进行对象间通信"></a>23.通过委托与数据源协议进行对象间通信</h4><ul><li>委托模式为对象提供了一套接口，使其可由此将相关事件告知其他对象。</li><li>将委托对象应该支持的接口定义成协议，在协议中把可能需要处理的事件定义成方法。</li><li>当某对象需要从另外一个对象中获取数据时，可以使用委托模式。这种情境下，该模式亦称“数据源协议”（data source protocal）。</li><li>若有必要，可实现含有位段的结构体，将委托对象是否能响应相关协议方法这一信息缓存至其中。</li></ul><h4 id="24-将类的实现代码分散到便于管理的数个分类之中"><a href="#24-将类的实现代码分散到便于管理的数个分类之中" class="headerlink" title="24.将类的实现代码分散到便于管理的数个分类之中"></a>24.将类的实现代码分散到便于管理的数个分类之中</h4><ul><li>使用分类机制把类的实现代码划分成易于管理的小块。</li><li>将应该视为“私有”的方法归入名叫Private的分类中，以隐藏实现细节。</li></ul><h4 id="25-总是为第三方类的分类名称加前缀"><a href="#25-总是为第三方类的分类名称加前缀" class="headerlink" title="25.总是为第三方类的分类名称加前缀"></a>25.总是为第三方类的分类名称加前缀</h4><ul><li>向第三方类中添加分类时，总应给其名称加上你专用的前缀。</li><li>向第三方类中添加分类时，总应给其中的方法名加上你专用的前缀。</li></ul><h4 id="26-勿在分类中声明属性"><a href="#26-勿在分类中声明属性" class="headerlink" title="26.勿在分类中声明属性"></a>26.勿在分类中声明属性</h4><ul><li>把封装数据所用的全部属性都定义在主接口里。</li><li>在“class-continuation分类”之外的其他分类中，可以定义存取方法，但尽量不要定义属性。</li></ul><h4 id="27-使用“class-continuation分类”隐藏实现细节"><a href="#27-使用“class-continuation分类”隐藏实现细节" class="headerlink" title="27.使用“class-continuation分类”隐藏实现细节"></a>27.使用“class-continuation分类”隐藏实现细节</h4><ul><li>通过“class-continuation分类”向类中新增实例变量。</li><li>如果某属性在主接口中声明为“只读”，而类的内部又要用设置方法修改此属性，那么就在“class-continuation分类”中将其扩展为“可读写”。</li><li>把私有方法的原型声明在“class-continuation分类”里面。</li><li>若想使类所遵循的协议不为人所知，则可于“class-continuation分类”中声明。</li></ul><h4 id="28-通过协议提供匿名对象"><a href="#28-通过协议提供匿名对象" class="headerlink" title="28.通过协议提供匿名对象"></a>28.通过协议提供匿名对象</h4><ul><li>协议可在某种程度上提供匿名类型。具体的对象类型可以淡化成遵从某协议的id类型，协议里规定了对象所应实现的方法。</li><li>使用匿名对象来隐藏类型名称（或类名）。</li><li>如果具体类型不重要，重要的是对象能够响应（定义在协议里的）特定方法，那么可以使用匿名对象来表示。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写高质量iOS与OS-X代码的52个有效方法&quot;&gt;&lt;a href=&quot;#编写高质量iOS与OS-X代码的52个有效方法&quot; class=&quot;headerlink&quot; title=&quot;编写高质量iOS与OS X代码的52个有效方法&quot;&gt;&lt;/a&gt;编写高质量iOS与OS X代码的52个有效方法&lt;/h2&gt;&lt;h3 id=&quot;第4章-协议与分类&quot;&gt;&lt;a href=&quot;#第4章-协议与分类&quot; class=&quot;headerlink&quot; title=&quot;第4章 协议与分类&quot;&gt;&lt;/a&gt;第4章 协议与分类&lt;/h3&gt;
    
    </summary>
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/categories/Effective-Objective-C-2-0/"/>
    
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/tags/Effective-Objective-C-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0（第3章）</title>
    <link href="http://chanceli.com/Effective-Objective-C-2-0%EF%BC%88%E7%AC%AC3%E7%AB%A0%EF%BC%89/"/>
    <id>http://chanceli.com/Effective-Objective-C-2-0（第3章）/</id>
    <published>2018-01-02T16:03:00.000Z</published>
    <updated>2018-12-06T10:03:24.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写高质量iOS与OS-X代码的52个有效方法"><a href="#编写高质量iOS与OS-X代码的52个有效方法" class="headerlink" title="编写高质量iOS与OS X代码的52个有效方法"></a>编写高质量iOS与OS X代码的52个有效方法</h2><h3 id="第3章-接口与API设计"><a href="#第3章-接口与API设计" class="headerlink" title="第3章 接口与API设计"></a>第3章 接口与API设计</h3><a id="more"></a><h4 id="15-用前缀避免命名空间冲突"><a href="#15-用前缀避免命名空间冲突" class="headerlink" title="15.用前缀避免命名空间冲突"></a>15.用前缀避免命名空间冲突</h4><ul><li>选择与你的公司、应用程序或者二者皆有关联之名作为类名的前缀，并在所有代码中均使用这一前缀。</li><li>若自己所开发的程序库中用到了第三方库，则应为其中的名称加上前缀。</li></ul><h4 id="16-提供“全能初始化方法”"><a href="#16-提供“全能初始化方法”" class="headerlink" title="16.提供“全能初始化方法”"></a>16.提供“全能初始化方法”</h4><ul><li>在类中提供一个全能初始化方法，并于文档里指明。其他初始化方法均应调用此方法。</li><li>若全能初始化方法与超类不同，则需覆写超类中的对应方法。</li><li>如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。</li></ul><h4 id="17-实现description方法"><a href="#17-实现description方法" class="headerlink" title="17.实现description方法"></a>17.实现description方法</h4><ul><li>实现description方法返回一个有意义的字符串，用以描述该实例。</li><li>若想在调试时打印出更详尽的对象描述信息，则应实现debugDescription方法。</li></ul><h4 id="18-尽量使用不可变对象"><a href="#18-尽量使用不可变对象" class="headerlink" title="18.尽量使用不可变对象"></a>18.尽量使用不可变对象</h4><ul><li>尽量创建不可变的对象。</li><li>若某属性仅可用于对象内部修改，则在“class-continuation分类”中将其由readonly属性扩展为readwrite属性。</li><li>不要把可变的collection作为属性公开，而应提供相关方法，以此修改对象中的可变collection。</li></ul><h4 id="19-使用清晰而协调的命名方式"><a href="#19-使用清晰而协调的命名方式" class="headerlink" title="19.使用清晰而协调的命名方式"></a>19.使用清晰而协调的命名方式</h4><ul><li>起名时应遵从标准的Objective-C命名规范，这样创建出来的接口更容易为开发者所理解。</li><li>方法名要言简意赅，从左至右读起来要像个日常用语中的句子才好。</li><li>方法名里不要使用缩略后的类型名称。</li><li>给方法起名时的第一要务就是确保其风格与你自己的代码或所要集成的框架相符。</li></ul><h4 id="20-为私有方法名加前缀"><a href="#20-为私有方法名加前缀" class="headerlink" title="20.为私有方法名加前缀"></a>20.为私有方法名加前缀</h4><ul><li>给私有方法的名称加上前缀，这样可以很容易的将其同公共方法区分开。</li><li>不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司用的。</li></ul><h4 id="21-理解-Objective-C错误模型"><a href="#21-理解-Objective-C错误模型" class="headerlink" title="21.理解 Objective-C错误模型"></a>21.理解 Objective-C错误模型</h4><ul><li>只有发生了可使整个应用程序崩溃的严重错误时，才应使用异常。</li><li>在错误不那么严重的情况下，可以指派委托方法（delegate method）来处理错误，也可以把错误信息放在NSError对象里，经由“输出参数”返回给调用者。</li></ul><h4 id="22-理解-NSCopying协议"><a href="#22-理解-NSCopying协议" class="headerlink" title="22.理解 NSCopying协议"></a>22.理解 NSCopying协议</h4><ul><li>若想令自己所写的对象具有拷贝功能，则需实现NSCopying协议。</li><li>如果自定义的对象分为可变版本和不可变版本，那么就要同时实现NSCopying与NSMutableCopying协议。</li><li>复制对象时需决定采用浅拷贝还是深拷贝，一般情况下应尽量执行浅拷贝。</li><li>如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写高质量iOS与OS-X代码的52个有效方法&quot;&gt;&lt;a href=&quot;#编写高质量iOS与OS-X代码的52个有效方法&quot; class=&quot;headerlink&quot; title=&quot;编写高质量iOS与OS X代码的52个有效方法&quot;&gt;&lt;/a&gt;编写高质量iOS与OS X代码的52个有效方法&lt;/h2&gt;&lt;h3 id=&quot;第3章-接口与API设计&quot;&gt;&lt;a href=&quot;#第3章-接口与API设计&quot; class=&quot;headerlink&quot; title=&quot;第3章 接口与API设计&quot;&gt;&lt;/a&gt;第3章 接口与API设计&lt;/h3&gt;
    
    </summary>
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/categories/Effective-Objective-C-2-0/"/>
    
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/tags/Effective-Objective-C-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0（第2章）</title>
    <link href="http://chanceli.com/Effective-Objective-C-2-0%EF%BC%88%E7%AC%AC2%E7%AB%A0%EF%BC%89/"/>
    <id>http://chanceli.com/Effective-Objective-C-2-0（第2章）/</id>
    <published>2018-01-01T16:02:00.000Z</published>
    <updated>2018-12-06T10:03:12.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写高质量iOS与OS-X代码的52个有效方法"><a href="#编写高质量iOS与OS-X代码的52个有效方法" class="headerlink" title="编写高质量iOS与OS X代码的52个有效方法"></a>编写高质量iOS与OS X代码的52个有效方法</h2><h3 id="第2章-对象、消息、运行期"><a href="#第2章-对象、消息、运行期" class="headerlink" title="第2章 对象、消息、运行期"></a>第2章 对象、消息、运行期</h3><a id="more"></a><h4 id="6-理解“属性”这一概念"><a href="#6-理解“属性”这一概念" class="headerlink" title="6.理解“属性”这一概念"></a>6.理解“属性”这一概念</h4><p>可以使用@synthesize语法来指定实例变量的名字。<br>atomic同步锁会严重影响性能，并且并不能保证线程安全。所以使用nonatomic。<br>atomic为什么不能保证线程安全？例：一个线程在连续多次读取某属性值的过程中有别的线程在同时改写该值，那么即便将属性声明为atomic，也还是会读到不同的属性值。</p><h4 id="7-在对象内部尽量直接访问实例变量"><a href="#7-在对象内部尽量直接访问实例变量" class="headerlink" title="7.在对象内部尽量直接访问实例变量"></a>7.在对象内部尽量直接访问实例变量</h4><p>在对象内部读取数据时，应该直接通过实例变量来读，而写入数据时，则应该通过属性来写（set方法，为了触发KVO）。<br>在初始化方法和dealloc方法中，总是应该直接通过实例变量来读写数据。<br>使用懒加载时，需要通过属性来读取数据。（get方法）</p><h4 id="8-理解“对象等同性”这一概念"><a href="#8-理解“对象等同性”这一概念" class="headerlink" title="8.理解“对象等同性”这一概念"></a>8.理解“对象等同性”这一概念</h4><p>== 比较的是两个指针本身，而不是所指的对象。<br>isEqual 比较的两个对象。<br>相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未必相同。<br>不要盲目地逐个检测每条属性，而是应该依照具体需求来制定监测方案。<br>编写hash方法时，应该使用计算速度快而且哈希码碰撞几率低的算法。</p><h4 id="9-以“类族模式”隐藏实现细节"><a href="#9-以“类族模式”隐藏实现细节" class="headerlink" title="9.以“类族模式”隐藏实现细节"></a>9.以“类族模式”隐藏实现细节</h4><ul><li>类族模式可以把实现细节隐藏在一套简单的公共接口后面。</li><li>系统框架中经常使用类族。</li><li>从类族的公共抽象基类中继承子类时要当心。</li></ul><h4 id="10-在既有类中使用关联对象存放自定义数据"><a href="#10-在既有类中使用关联对象存放自定义数据" class="headerlink" title="10.在既有类中使用关联对象存放自定义数据"></a>10.在既有类中使用关联对象存放自定义数据</h4><p>objc_setAssociatedObject<br>objc_getAssociatedObject<br>objc_removeAssociatedObject</p><h4 id="11-理解objc-msgSend的作用"><a href="#11-理解objc-msgSend的作用" class="headerlink" title="11.理解objc_msgSend的作用"></a>11.理解objc_msgSend的作用</h4><ul><li>消息由接收者、选择子及参数构成。给某对象发送消息也就相当于在该对象上调用方法。</li><li>发给某对象的全部消息都要由动态消息派发系统来处理，该系统会查出对应的方法，并执行其代码。</li></ul><h4 id="12-理解消息转发机制"><a href="#12-理解消息转发机制" class="headerlink" title="12.理解消息转发机制"></a>12.理解消息转发机制</h4><ul><li>若对象无法响应某个选择子，则进入消息转发流程。</li><li>通过运行期的动态方法解析功能，我们可以在需要用到某个方法时再将其加入类中。</li><li>对象可以把其无法解读的某些选择子转交给其他对象来处理。</li><li>经过上述两步后，如果还是没办法处理选择子，那就启动完整的消息转发机制。</li></ul><h4 id="13-用“方法调配技术”调试“黑盒方法”"><a href="#13-用“方法调配技术”调试“黑盒方法”" class="headerlink" title="13.用“方法调配技术”调试“黑盒方法”"></a>13.用“方法调配技术”调试“黑盒方法”</h4><ul><li>在运行期，可以向类中新增或替换选择子所对应的方法实现。</li><li>使用另一份实现来替换原有的方法实现，这道工序叫做“方法调配”，开发者常使用此技术向原有实现中添加新功能。</li><li>一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用。</li></ul><h4 id="14-理解“类对象”的用意"><a href="#14-理解“类对象”的用意" class="headerlink" title="14.理解“类对象”的用意"></a>14.理解“类对象”的用意</h4><ul><li>每个实例都有一个指向Class对象的指针，用以表明其类型，而这些Class对象则构成了类的继承体系。</li><li>如果对象类型无法在编译期确定，那么就应该使用类型信息查询方法来探知。</li><li>尽量使用类型信息查询方法来确定对象类型，而不要直接比较类对象，因为某些对象可能实现了消息转发功能。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写高质量iOS与OS-X代码的52个有效方法&quot;&gt;&lt;a href=&quot;#编写高质量iOS与OS-X代码的52个有效方法&quot; class=&quot;headerlink&quot; title=&quot;编写高质量iOS与OS X代码的52个有效方法&quot;&gt;&lt;/a&gt;编写高质量iOS与OS X代码的52个有效方法&lt;/h2&gt;&lt;h3 id=&quot;第2章-对象、消息、运行期&quot;&gt;&lt;a href=&quot;#第2章-对象、消息、运行期&quot; class=&quot;headerlink&quot; title=&quot;第2章 对象、消息、运行期&quot;&gt;&lt;/a&gt;第2章 对象、消息、运行期&lt;/h3&gt;
    
    </summary>
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/categories/Effective-Objective-C-2-0/"/>
    
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/tags/Effective-Objective-C-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0（第1章）</title>
    <link href="http://chanceli.com/Effective-Objective-C-2-0%EF%BC%88%E7%AC%AC1%E7%AB%A0%EF%BC%89/"/>
    <id>http://chanceli.com/Effective-Objective-C-2-0（第1章）/</id>
    <published>2017-12-31T16:01:00.000Z</published>
    <updated>2018-12-08T11:51:36.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编写高质量iOS与OS-X代码的52个有效方法"><a href="#编写高质量iOS与OS-X代码的52个有效方法" class="headerlink" title="编写高质量iOS与OS X代码的52个有效方法"></a>编写高质量iOS与OS X代码的52个有效方法</h2><h3 id="第1章-熟悉Objective-C"><a href="#第1章-熟悉Objective-C" class="headerlink" title="第1章 熟悉Objective-C"></a>第1章 熟悉Objective-C</h3><a id="more"></a><h4 id="1-了解Objective-C-语言的起源"><a href="#1-了解Objective-C-语言的起源" class="headerlink" title="1.了解Objective-C 语言的起源"></a>1.了解Objective-C 语言的起源</h4><p>Objective-C使用消息结构messaging structure，而非函数调用function calling。<br>消息结构：运行时所运行的代码是由运行环境决定的。运行时才会去查找所要执行的方法。<br>函数调用：编译器决定。<br>Objective-C是C语言的超集，使用动态绑定的消息结构，在运行时才会检查对象类型。接收到一条消息后，究竟该执行何种代码，由运行时环境而非编译器决定。<br>对象所占内存总是分配在堆上。</p><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li>Objective-C 为C语言添加了面向对象特性，是其超集。Objective-C 使用动态绑定的消息结构，也就是说，在运行时才会检查对象类型。接受一条消息之后，究竟应执行何种代码，由运行期环境而非编译器来决定。</li><li>理解C语言的核心概念有助于写好Objective-C程序。尤其要掌握内存模型与指针。</li></ul><h4 id="2-在类的头文件中尽量少引入其他头文件"><a href="#2-在类的头文件中尽量少引入其他头文件" class="headerlink" title="2.在类的头文件中尽量少引入其他头文件"></a>2.在类的头文件中尽量少引入其他头文件</h4><p>@class的作用：<br>（1）可以将引入头文件的时机延后，只在确实有需要的时候才引入，可以减少类的使用者所需引入的头文件数量，减少编译时间。<br>（2）解决两个类相互引用的问题。相互引用会导致循环引用，两个类里有一个无法被正确编译。</p><h5 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h5><ul><li>除非确有必要，否则不要引入头文件。一般来说，应在某个类的头文件中使用向前声明来提及别的类，并在实现文件中引入那些类的头文件。这样做可以尽量降低类之间的耦合(coupling)。</li><li>有时无法使用向前声明，比如要声明某个类遵循一项协议。这种情况下，尽量把“该类遵循某协议”的这条声明移至“class-continuation分类”中。如果不行的话，就把协议单独放在一个头文件中，然后将其引入。</li></ul><h4 id="3-多用字面量语法，少用与之等价的方法"><a href="#3-多用字面量语法，少用与之等价的方法" class="headerlink" title="3.多用字面量语法，少用与之等价的方法"></a>3.多用字面量语法，少用与之等价的方法</h4><p>字面量语法简明扼要。<br>创建数组或字典时使用字面量语法能够尽早发现插入nil的问题。</p><h5 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h5><ul><li>应该使用字面量语法来创建字符串、数值、数组、字典。与创建此类对象的常规方法相比，这么做更加简明扼要。</li><li>应该通过取下标操作来访问数组下标或字典中的键所对应的元素。</li><li>用字面量语法创建数组或字典时，若值中有nil，则会抛出异常。因此，务必确保值里不含nil。</li></ul><h4 id="4-多用类型常量，少用-define预处理命令"><a href="#4-多用类型常量，少用-define预处理命令" class="headerlink" title="4.多用类型常量，少用#define预处理命令"></a>4.多用类型常量，少用#define预处理命令</h4><ul><li>不要使用预处理指令定义常量。（1）这样定义出来的常量不含类型信息，编译器只是会在编译前据此执行查找与替换操作。（2）如果被其他人重新定义了常量值，编译器不会报警告，这将导致常量值不一致。</li><li>在实现文件里使用static const来定义此类中使用的常量。由于此类常量不在全局符号表中，所以无须为其名称加前缀。</li><li>在头文件中使用extern来声明全局变量，并在实现文件中定义其值。这种常量会出现在全局符号表中，所以名称最好加上与之相关的类名做前缀。</li></ul><h4 id="5-用枚举表示状态、选项、状态码"><a href="#5-用枚举表示状态、选项、状态码" class="headerlink" title="5.用枚举表示状态、选项、状态码"></a>5.用枚举表示状态、选项、状态码</h4><h5 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h5><ul><li>应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。</li><li>如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将个选项值定义为2的幂，以便通过按位或操作将其组合起来。</li><li>用NS_ENUM与NS_OPTIONS宏来定义枚举类型，并指明其底层数据结构。这样做可以确保枚举类型是用开发者所选的底层数据结构实现出来的，而不会采用编译器所选的类型。</li><li>在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch语句并未处理所有枚举。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编写高质量iOS与OS-X代码的52个有效方法&quot;&gt;&lt;a href=&quot;#编写高质量iOS与OS-X代码的52个有效方法&quot; class=&quot;headerlink&quot; title=&quot;编写高质量iOS与OS X代码的52个有效方法&quot;&gt;&lt;/a&gt;编写高质量iOS与OS X代码的52个有效方法&lt;/h2&gt;&lt;h3 id=&quot;第1章-熟悉Objective-C&quot;&gt;&lt;a href=&quot;#第1章-熟悉Objective-C&quot; class=&quot;headerlink&quot; title=&quot;第1章 熟悉Objective-C&quot;&gt;&lt;/a&gt;第1章 熟悉Objective-C&lt;/h3&gt;
    
    </summary>
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/categories/Effective-Objective-C-2-0/"/>
    
    
      <category term="Effective Objective-C 2.0" scheme="http://chanceli.com/tags/Effective-Objective-C-2-0/"/>
    
  </entry>
  
  <entry>
    <title>RunLoop总结</title>
    <link href="http://chanceli.com/runloop%E6%80%BB%E7%BB%93/"/>
    <id>http://chanceli.com/runloop总结/</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2018-12-08T14:36:23.829Z</updated>
    
    <content type="html"><![CDATA[<p>Runloops是线程相关底层基础的一部分。它的本质和字面意思一样运行着的循环（事件处理的循环）。<br><a id="more"></a><br>作用：接受循环事件和安排线程的工作。<br>目的：让线程在有任务的时候忙于工作，而没有任务的时候处于休眠状态。</p><h4 id="RunLoop概念"><a href="#RunLoop概念" class="headerlink" title="RunLoop概念"></a>RunLoop概念</h4><p>Runloop运行循环<br>iOS中通常所说的Runloop指的是NSRunloop（Foundation框架）或者CFRunloopRef（CoreFoundation框架），CFRunloopRef是纯C的函数，而NSRunloop仅仅是CFRunloopRef的一层OC封装。</p><h4 id="RunLoop作用"><a href="#RunLoop作用" class="headerlink" title="RunLoop作用"></a>RunLoop作用</h4><ol><li>保持程序的持续运行。</li><li>处理App中的各种事件。（如：touches触摸事件、NSTimer定时器事件、Selector事件）</li><li>节省CPU资源，提高程序性能（有事情就做事情，没事情就休息，资源释放）</li><li>负责渲染屏幕上的所有UI。</li></ol><h4 id="RunLoop开启-amp-退出"><a href="#RunLoop开启-amp-退出" class="headerlink" title="RunLoop开启&amp;退出"></a>RunLoop开启&amp;退出</h4><p>在UIApplicationMain函数内部开启了一个和主线程相关的RunLoop (保证主线程不会被销毁)，导致 UIApplicationMain 不会返回，一直在运行中，也就保证了程序的持续运行。<br>Runloop 的退出条件：<br>App退出；线程关闭；设置最大时间到期。</p><h4 id="RunLoop和线程关系"><a href="#RunLoop和线程关系" class="headerlink" title="RunLoop和线程关系"></a>RunLoop和线程关系</h4><ol><li>每条线程都有唯一的一个与之对应的Runloop对象。</li><li>主线程的RunLoop已经自动创建，子线程的RunLoop需要主动创建。</li><li>RunLoop在第一次获取时创建，在线程结束时销毁。</li><li>Runloop对象是利用字典来进行存储，Key：线程  Value：线程对应的Runloop。</li></ol><h5 id="创建子线程对应的RunLoop"><a href="#创建子线程对应的RunLoop" class="headerlink" title="创建子线程对应的RunLoop"></a>创建子线程对应的RunLoop</h5><p>currentRunLoop</p><h4 id="RunLoop相关类"><a href="#RunLoop相关类" class="headerlink" title="RunLoop相关类"></a>RunLoop相关类</h4><ul><li>CFRunLoopRef: RunLoop本身</li><li>CFRunLoopModeRef: 运行模式</li><li>CFRunLoopSourceRef: 事件源</li><li>CFRunLoopTimerRef: Timer事件</li><li>CFRunLoopObserverRef: 观察者（监听者）</li></ul><ol><li><p>一条线程 对应一个 Runloop，Runloop 总是运行在某种特定的CFRunLoopModeRef（运行模式）下。</p></li><li><p>每个 Runloop 都可以包含若干个 Mode ，每个 Mode 又包含Source源 / Timer事件 / Observer观察者。</p></li><li><p>在 Runloop 中有多个运行模式，每次调用 RunLoop 的主函数<code>__CFRunloopRun()</code>时，只能指定其中一个 Mode（称 CurrentMode）运行， 如果需要切换 Mode，只能是退出 CurrentMode 切换到指定的 Mode 进入，目的以保证不同 Mode 下的 Source / Timer / Observer 互不影响。</p></li><li><p>Runloop 有效，mode 里面 至少 要有一个timer(定时器事件) 或者是source(源)。</p></li></ol><h5 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h5><ul><li>kCFRunLoopDefaultMode App的默认Mode，通常主线程是在这个Mode下运行。</li><li>UITrackingRunLoopMode 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动</li><li>UIInitializationRunLoopMode  在刚启动 App 时第进入的第一个 Mode，启动完成后就不再使用。</li><li>GSEventReceiveRunLoopMode 接受系统事件的内部 Mode，通常用不到。</li><li>kCFRunLoopCommonModes 一种模式组合</li></ul><h5 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h5><ul><li>Source0:非基于端口Port的事件（用于用户主动触发的事件，如：点击按钮或点击屏幕）。</li><li>Source：基于端口Port的事件（通过内核和其他线程互相发送消息）</li></ul><h5 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h5><p>NSTimer受RunLoop的Mode影响。GCD定时器不受RunLoop影响。</p><h5 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h5><p>消息循环中的监听器</p><h4 id="RunLoop休眠"><a href="#RunLoop休眠" class="headerlink" title="RunLoop休眠"></a>RunLoop休眠</h4><p>RunLoop 最核心的事情就是保证线程在没有消息时休眠以避免占用系统资源，有消息时能够及时唤醒。 RunLoop 的这个机制完全依靠系统内核来完成，具体来说是苹果操作系统核心组件 Darwin 中的 Mach 来完成的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Runloops是线程相关底层基础的一部分。它的本质和字面意思一样运行着的循环（事件处理的循环）。&lt;br&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://chanceli.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://chanceli.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Runtime总结</title>
    <link href="http://chanceli.com/runtime%E6%80%BB%E7%BB%93/"/>
    <id>http://chanceli.com/runtime总结/</id>
    <published>2017-04-23T16:00:00.000Z</published>
    <updated>2018-12-08T14:34:14.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Runtime是什么？"><a href="#一、Runtime是什么？" class="headerlink" title="一、Runtime是什么？"></a>一、Runtime是什么？</h3><a id="more"></a><p>Runtime 运行时，就是系统在运行的时候的一些机制，其中最主要的是消息机制。<br>Runtime 基本是用C和汇编编写的。</p><h4 id="OC与C语言在函数调用上的区别："><a href="#OC与C语言在函数调用上的区别：" class="headerlink" title="OC与C语言在函数调用上的区别："></a>OC与C语言在函数调用上的区别：</h4><p>C语言：</p><ol><li>函数的调用在编译的时候就决定调用哪个函数，编译完成之后直接顺序执行，无任何二义性。</li><li>C语言在编译阶段调用未实现的函数就会报错。</li></ol><p>OC：</p><ol><li>函数的调用称为消息发送。属于动态调用过程。</li><li>在编译的时候并不能决定真正调用哪个函数。在编译阶段，可以调用任何函数，只要函数声明过。</li></ol><h3 id="二、与Runtime系统交互："><a href="#二、与Runtime系统交互：" class="headerlink" title="二、与Runtime系统交互："></a>二、与Runtime系统交互：</h3><h5 id="1-通过OC源代码"><a href="#1-通过OC源代码" class="headerlink" title="1. 通过OC源代码"></a>1. 通过OC源代码</h5><p>编译器会自动将OC代码转换成运行时代码，在运行时确定数据结构和函数。</p><h5 id="2-NSObject类定义的方法"><a href="#2-NSObject类定义的方法" class="headerlink" title="2. NSObject类定义的方法"></a>2. NSObject类定义的方法</h5><p>-class<br>-isKindOfClass  -isMemberOfClass<br>-respondsToSelector<br>-confirmsToProtocol<br>-methodForSelector  返回指定方法实现的地址</p><h5 id="3-直接调用-Runtime-库函数-Runtime-常用接口方法"><a href="#3-直接调用-Runtime-库函数-Runtime-常用接口方法" class="headerlink" title="3. 直接调用 Runtime 库函数(Runtime 常用接口方法)"></a>3. 直接调用 Runtime 库函数(Runtime 常用接口方法)</h5><p>object_getClass<br>@selector()<br>class_getClassMethod<br>class_getInstanceMethod<br>class_addMethod()<br>class_replaceMethod<br>method_exchangeImplementations<br>class_copyPropertyList<br>class_copyMethodList<br>class_copyProtocolList</p><h3 id="三、Runtime相关术语"><a href="#三、Runtime相关术语" class="headerlink" title="三、Runtime相关术语"></a>三、Runtime相关术语</h3><p>SEL<br>id<br>Class<br>Method<br>Ivar 成员变量<br>IMP 是一个函数指针，指向了方法的实现。<br>Cache</p><h3 id="四、消息发送和消息转发"><a href="#四、消息发送和消息转发" class="headerlink" title="四、消息发送和消息转发"></a>四、消息发送和消息转发</h3><h4 id="消息发送-objc-msgSend"><a href="#消息发送-objc-msgSend" class="headerlink" title="消息发送  objc_msgSend"></a>消息发送  objc_msgSend</h4><ol><li>通过isa指针找到所属类。</li><li>查找类的cache列表, 如果没有则下一步。</li><li>查找类的”方法列表”。</li><li>如果能找到与选择子名称相符的方法, 就跳至其实现代码。</li><li>找不到, 就沿着继承体系继续向上查找。</li><li>如果能找到与选择子名称相符的方法, 就跳至其实现代码。</li><li>找不到, 执行”消息转发”。</li></ol><h4 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h4><ol><li><p>动态方法解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)selector</span><br></pre></td></tr></table></figure></li><li><p>其他接收者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)selector</span><br></pre></td></tr></table></figure></li><li><p>消息签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure></li><li><p>完整的消息转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)invocation</span><br><span class="line">// invocation : 封装了与那条尚未处理的消息相关的所有细节的对象</span><br></pre></td></tr></table></figure></li></ol><h3 id="五、Runtime应用"><a href="#五、Runtime应用" class="headerlink" title="五、Runtime应用"></a>五、Runtime应用</h3><ol><li>动态添加一个类（KVO的实现原理）</li><li>获取一个类的所有属性<br>（1）打印一个类的成员变量列表，属性列表，方法列表<br>（2）动态改变变量的值。<br>（3）在 NSObject 的分类中增加方法，判断是否有该属性，用于避免使用KVC赋值时崩溃。<br>（4）自动归档和解档<br>（5）字典转模型</li><li>动态交换方法<br>（1）交换方法<br>（2）替换系统方法<br>（3）实现多继承的效果</li><li>动态添加方法 performSelector<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resolveInstanceMethod</span><br><span class="line">class_addMethod(self, @selector(eat), eat, &quot;v@:&quot;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、Runtime是什么？&quot;&gt;&lt;a href=&quot;#一、Runtime是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、Runtime是什么？&quot;&gt;&lt;/a&gt;一、Runtime是什么？&lt;/h3&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://chanceli.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://chanceli.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="http://chanceli.com/aboutme/"/>
    <id>http://chanceli.com/aboutme/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2018-12-06T10:04:41.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS开发工程师。"><a href="#iOS开发工程师。" class="headerlink" title="iOS开发工程师。"></a>iOS开发工程师。</h3><a id="more"></a><p>4年多的iOS开发经验，熟练使用Objective-C/Swift开发过多款公司商业App，业余时间独立开发上架过几款商业App，涉及直播、互联网金融、酒店、医疗、电商等。</p><h4 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h4><p>邮件：<a href="mailto:redlic@163.com" target="_blank" rel="noopener">redlic@163.com</a></p><h4 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h4><p>2010.9-2014.6   河南财经政法大学 | 信息管理与信息系统(计算机与信息工程学院) | 本科 | CET-6</p><h4 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h4><ul><li><p>熟练使用Objective-C/Swift编写高质量代码。</p></li><li><p>掌握iOS平台GUI开发，自定义控件的封装。熟练使用AutoLayout、Masonry/SnapKit进行屏幕适配。</p></li><li><p>掌握装饰、工厂、单例、观察者等设计模式，掌握MVC，了解MVVM等架构。</p></li><li><p>掌握网络处理与数据解析，熟悉GCD、NSOperation、NSThread等多线程编程技术。</p></li><li><p>掌握属性列表、对象归档、SQLite3、Realm数据库等数据持久化方法。</p></li><li><p>掌握内存管理，掌握内存优化。</p></li><li><p>掌握Runtime、Runloop等底层实现及应用。</p></li><li><p>熟悉iOS常用框架如：AFNetworking、SDWebImage等的内部结构和实现原理。</p></li><li><p>熟练掌握Xcode、Cocoapods、Instruments等开发工具。</p></li><li><p>熟练掌握Git、SVN代码管理工具的使用。</p></li><li><p>掌握软件内嵌入直播、聊天、支付、地图等功能模块的方法。</p></li></ul><h4 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h4><h5 id="联想控股佳沃集团（2014年7月至2015年9月）"><a href="#联想控股佳沃集团（2014年7月至2015年9月）" class="headerlink" title="联想控股佳沃集团（2014年7月至2015年9月）"></a>联想控股佳沃集团（2014年7月至2015年9月）</h5><p>佳沃鲜生活是一家电商公司，提供在线购买水果、零食、主食等服务。</p><p>在产品研发中心担任iOS开发工程师一职，负责公司的电商业务iOS客户端的开发上线与迭代维护，参与开发上线了佳沃市集，参与开发维护了佳沃微店。</p><h5 id="新毅网络科技有限公司（2015年10月至2018年7月）"><a href="#新毅网络科技有限公司（2015年10月至2018年7月）" class="headerlink" title="新毅网络科技有限公司（2015年10月至2018年7月）"></a>新毅网络科技有限公司（2015年10月至2018年7月）</h5><p>新毅网络科技有限公司是一家互联网金融公司，提供理财、借贷等信息中介服务。</p><p>在技术中心担任iOS工程师一职，负责公司的互联网金融业务iOS客户端的开发上线与迭代维护，包括718金融财富、718金融借款、718金融房毅贷等。</p><h4 id="主要项目"><a href="#主要项目" class="headerlink" title="主要项目"></a>主要项目</h4><h5 id="一、吆趣-https-fir-im-ushow"><a href="#一、吆趣-https-fir-im-ushow" class="headerlink" title="一、吆趣(https://fir.im/ushow)"></a>一、吆趣(<a href="https://fir.im/ushow" target="_blank" rel="noopener">https://fir.im/ushow</a>)</h5><p>吆趣是一款直播App，提供直播、送礼物、查看周边机构等功能。</p><p>独立负责整个项目的开发。使用Swift开发。</p><h6 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h6><ol><li>集成阿里云直播实现推流、拉流。</li><li>集成环信聊天室，实现直播房间内聊天。</li><li>送礼物、点赞动画实现。</li><li>实现微博、微信、QQ第三方登录。</li></ol><h5 id="二、718金融财富、借款、房毅贷"><a href="#二、718金融财富、借款、房毅贷" class="headerlink" title="二、718金融财富、借款、房毅贷"></a>二、718金融财富、借款、房毅贷</h5><p>718金融财富是理财App，718金融借款、房毅贷是提供信用贷、抵押贷的借贷App。</p><p>负责整个互金项目的业务需求、接口沟通，功能模块开发，后期迭代。实现了理财买标、充值提现、进件授信申请、用信、电子签章、还款等一系列业务流程。理财使用Objective-C开发，房毅贷、借款主要使用Swift开发。</p><h6 id="技术点：-1"><a href="#技术点：-1" class="headerlink" title="技术点："></a>技术点：</h6><ol><li>封装基础工具类，封装网络请求类。</li><li>接过多家支付，包括京东、连连、易宝、银行存管等。处理对接遇到的问题。</li><li>实现手势密码、TouchID指纹解锁/登录。</li><li>使用Keychain保存登录密码，实现免登录机制。</li><li>风险评测与H5交互，评测完毕后返回App，处理评测结果，解决遇到的线程问题。</li><li>集成考拉征信人脸识别。OCR识别身份证银行卡，省去手动输入。</li></ol><h5 id="三、酒店会-https-fir-im-hotel8"><a href="#三、酒店会-https-fir-im-hotel8" class="headerlink" title="三、酒店会(https://fir.im/hotel8)"></a>三、酒店会(<a href="https://fir.im/hotel8" target="_blank" rel="noopener">https://fir.im/hotel8</a>)</h5><p>酒店会是酒店会员App，提供酒店预订、办理入住、退房结账、餐饮商城、预约服务等服务。</p><p>独立负责酒店项目的所有功能模块实现。使用Swift开发。</p><h6 id="技术点：-2"><a href="#技术点：-2" class="headerlink" title="技术点："></a>技术点：</h6><ol><li>使用Realm数据库实现餐饮商城购物车的数据持久化处理。</li><li>接入支付宝、微信支付、易宝支付/预授权，处理易宝支付成功后服务器订单状态更新不及时的问题。</li><li>集成环信客户互动云实现客服IM，解决Swift环境下环信报错及第三方库冲突问题。</li><li>接入高德地图实现酒店距离、到店时长、路径规划。</li><li>封装提示框、筛选框等通用控件。</li><li>实现微信登录。</li><li>解决选房锁房的cell倒计时间隔跳跃的问题。</li></ol><h5 id="四、历真诊疗、医生端-https-fir-im-wpwp"><a href="#四、历真诊疗、医生端-https-fir-im-wpwp" class="headerlink" title="四、历真诊疗、医生端(https://fir.im/wpwp)"></a>四、历真诊疗、医生端(<a href="https://fir.im/wpwp" target="_blank" rel="noopener">https://fir.im/wpwp</a>)</h5><p>历真诊疗是化验单解读App，用户上传化验单，得到包含异常指标解析、诊疗建议等专业易懂的解读报告。还可以亚健康自测、个性化体检、阅读资讯等。医生端可以上传文章、诊断化验单等。</p><p>独立负责医疗项目所有功能模块的实现。使用Objective-C开发。</p><h6 id="技术点：-3"><a href="#技术点：-3" class="headerlink" title="技术点："></a>技术点：</h6><ol><li>医生端查看用户上传的图片，调整图片大小，填写指标。</li><li>使用plist做数据持久化处理，实现调查问卷本地化，分步骤调查问卷的原生实现。</li><li>发现页面混合多段文字和多张图片文章的原生实现，医生端上传文章，用户端显示文章。</li><li>用户端本地推送实现健康提醒，医生端使用个推实现新上传化验单的及时通知。</li></ol><h5 id="五、佳沃市集"><a href="#五、佳沃市集" class="headerlink" title="五、佳沃市集"></a>五、佳沃市集</h5><p>佳沃市集是一款在线购物类APP，可以在线购买水果、零食、主食等，参与团购，限时抢购等优惠购买，分享商品给好友。</p><p>负责项目框架的搭建，购物车、订单确认、个人中心等模块的实现。使用Objective-C开发。</p><h6 id="技术点：-4"><a href="#技术点：-4" class="headerlink" title="技术点："></a>技术点：</h6><ol><li>集成友盟统计，记录程序崩溃，快速定位程序bug。</li><li>提示框的封装。</li><li>使用对象归档做数据持久化处理，实现购物车本地化（1.0版本），购物车复杂逻辑及购物流程的实现。</li><li>集成支付宝支付，完成下单流程。</li><li>使用ShareSDK实现分享到各大社交平台以及二维码分享等。</li><li>WebView与JS交互实现H5活动页商品添加到原生购物车。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iOS开发工程师。&quot;&gt;&lt;a href=&quot;#iOS开发工程师。&quot; class=&quot;headerlink&quot; title=&quot;iOS开发工程师。&quot;&gt;&lt;/a&gt;iOS开发工程师。&lt;/h3&gt;
    
    </summary>
    
      <category term="关于" scheme="http://chanceli.com/categories/%E5%85%B3%E4%BA%8E/"/>
    
    
      <category term="个人简介" scheme="http://chanceli.com/tags/%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="http://chanceli.com/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://chanceli.com/Markdown常用语法/</id>
    <published>2015-12-31T16:00:00.000Z</published>
    <updated>2018-12-08T14:20:31.974Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown常用语法</p></blockquote><a id="more"></a><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h1><h2 id="2-1-无序列表"><a href="#2-1-无序列表" class="headerlink" title="2.1 无序列表"></a>2.1 无序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 文本1</span><br><span class="line">- 文本2</span><br><span class="line">- 文本3</span><br></pre></td></tr></table></figure><h3 id="预览-1"><a href="#预览-1" class="headerlink" title="预览"></a>预览</h3><ul><li>文本1</li><li>文本2</li><li>文本3</li></ul><h2 id="2-2-有序列表"><a href="#2-2-有序列表" class="headerlink" title="2.2 有序列表"></a>2.2 有序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 文本1</span><br><span class="line">2. 文本2</span><br><span class="line">3. 文本3</span><br></pre></td></tr></table></figure><h3 id="预览-2"><a href="#预览-2" class="headerlink" title="预览"></a>预览</h3><ol><li>文本1</li><li>文本2</li><li>文本3</li></ol><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h1><p>在引用的文字前面加上<code>&gt;</code>就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用的文本</span><br></pre></td></tr></table></figure><h3 id="预览-3"><a href="#预览-3" class="headerlink" title="预览"></a>预览</h3><blockquote><p>引用的文本</p></blockquote><h1 id="4-粗体和斜体、删除文本"><a href="#4-粗体和斜体、删除文本" class="headerlink" title="4. 粗体和斜体、删除文本"></a>4. 粗体和斜体、删除文本</h1><h2 id="4-1-粗体"><a href="#4-1-粗体" class="headerlink" title="4.1 粗体"></a>4.1 粗体</h2><p>用两个<code>*</code>包含一段文本即是粗体</p><h2 id="4-2-斜体"><a href="#4-2-斜体" class="headerlink" title="4.2 斜体"></a>4.2 斜体</h2><p>用一个<code>*</code>包含一段文本即是斜体</p><h2 id="4-3-删除文本"><a href="#4-3-删除文本" class="headerlink" title="4.3 删除文本"></a>4.3 删除文本</h2><p>用<code>~~</code>包含一段文本即是删除文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**粗体文本**</span><br><span class="line">*斜体文本*</span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure></p><h3 id="预览-4"><a href="#预览-4" class="headerlink" title="预览"></a>预览</h3><p><strong>粗体文本</strong><br><em>斜体文本</em><br><del>删除文本</del></p><h1 id="5-代码引用"><a href="#5-代码引用" class="headerlink" title="5. 代码引用"></a>5. 代码引用</h1><h2 id="5-1-单行代码"><a href="#5-1-单行代码" class="headerlink" title="5.1 单行代码"></a>5.1 单行代码</h2><p>引用代码时，如果引用的语句只有一行，可以用<code>·</code>(英文输入状态下左上角~下边的点)将语句包起来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`Markdown`</span><br></pre></td></tr></table></figure></p><h3 id="预览-5"><a href="#预览-5" class="headerlink" title="预览"></a>预览</h3><p><code>Markdown</code></p><h2 id="5-2-多行代码"><a href="#5-2-多行代码" class="headerlink" title="5.2 多行代码"></a>5.2 多行代码</h2><p>引用多行代码时，使用<code>···</code>（英文输入状态下左上角~下边的点）置于这段代码的首行和末行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">func printHello() &#123;</span><br><span class="line">    print(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><h3 id="预览-6"><a href="#预览-6" class="headerlink" title="预览"></a>预览</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func printHello() &#123;</span><br><span class="line">    print(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-图片和链接"><a href="#6-图片和链接" class="headerlink" title="6. 图片和链接"></a>6. 图片和链接</h1><h2 id="6-1-图片"><a href="#6-1-图片" class="headerlink" title="6.1 图片"></a>6.1 图片</h2><p>使用<code>![图片名字](图片链接地址)</code></p><h2 id="6-2-链接"><a href="#6-2-链接" class="headerlink" title="6.2 链接"></a>6.2 链接</h2><p>使用<code>[链接名字](链接地址)</code></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![头像](https://chanceli.com/images/avatar-small.png)</span><br><span class="line">[百度](https://www.baidu.com)</span><br></pre></td></tr></table></figure><h3 id="预览-7"><a href="#预览-7" class="headerlink" title="预览"></a>预览</h3><p><img src="https://chanceli.com/images/avatar-small.png" alt="头像"><br><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p><h1 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7. 分割线"></a>7. 分割线</h1><p><code>***</code>或<code>---</code></p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="预览-8"><a href="#预览-8" class="headerlink" title="预览"></a>预览</h3><hr><h1 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h1><p><code>---</code>上面表示表头，下面表示表身，<code>:</code>在左边表示居左，在两边表示居中，在右边表示居右，不写<code>:</code>的话表头默认居中，表身默认居左。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 居左表头1    | 居中表头2     | 居右表头3  |</span><br><span class="line">| :---------- |:---------:  | -----:    |</span><br><span class="line">| 第1行文本    | 第1行文本     | 第1行文本  |</span><br><span class="line">| 第2行文本    | 第2行文本     | 第2行文本  |</span><br><span class="line">| 第3行文本    | 第3行文本     | 第3行文本  |</span><br></pre></td></tr></table></figure><h3 id="预览-9"><a href="#预览-9" class="headerlink" title="预览"></a>预览</h3><table><thead><tr><th style="text-align:left">居左表头1</th><th style="text-align:center">居中表头2</th><th style="text-align:right">居右表头3</th></tr></thead><tbody><tr><td style="text-align:left">第1行文本</td><td style="text-align:center">第1行文本</td><td style="text-align:right">第1行文本</td></tr><tr><td style="text-align:left">第2行文本</td><td style="text-align:center">第2行文本</td><td style="text-align:right">第2行文本</td></tr><tr><td style="text-align:left">第3行文本</td><td style="text-align:center">第3行文本</td><td style="text-align:right">第3行文本</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Markdown常用语法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://chanceli.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://chanceli.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World.</title>
    <link href="http://chanceli.com/helloworld/"/>
    <id>http://chanceli.com/helloworld/</id>
    <published>2014-12-31T16:00:00.000Z</published>
    <updated>2018-12-06T05:50:31.101Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World.你好，世界。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello World.你好，世界。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Hello World" scheme="http://chanceli.com/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="http://chanceli.com/tags/Hello-World/"/>
    
  </entry>
  
</feed>
